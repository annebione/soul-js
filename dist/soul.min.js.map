{"version":3,"file":"soul.min.js","sources":["../src/lib/Rank.js","../src/lib/ReverseRank.js","../src/utils/typeIsCorrect.js","../src/lib/SetRanking.js","../src/lib/Render.js","../src/lib/CapitalizeAlll.js","../src/index.js"],"sourcesContent":["export default function Rank(array) {\r\n    const _args = arguments;\r\n\r\n    try {\r\n        // Type check, throw TypeError if necessary\r\n        if (Array.isArray(array)) {\r\n\r\n            // Check if it's an array of objects by looking into an optional second argument\r\n            // Do a simple sort if it's not\r\n            if (_args[1]) {\r\n                for (var i = 0; i <= array.length + 5; i++) {\r\n                    if (typeof(array[i][_args[1]]) == 'number') {\r\n                        return new Promise((resolve, reject) => {\r\n                            resolve(array.sort(function(a, b) {\r\n                                return a[_args[1]] < b[_args[1]]\r\n                            }))\r\n                        })\r\n                    }\r\n                    if (typeof(array[i][_args[1]]) == 'string') {\r\n\r\n                        return new Promise((resolve, reject) => {\r\n                            resolve(array.sort(function(a, b) {\r\n                                if (a[_args[1]] < b[_args[1]]) {\r\n                                    return -1\r\n                                }\r\n                                if (a[_args[1]] > b[_args[1]]) {\r\n                                    return 1\r\n                                }\r\n                                return 0;\r\n                            }))\r\n                        })\r\n                    }\r\n                } \r\n            } else {\r\n                return new Promise((resolve, reject) => {\r\n                    resolve(array.sort())\r\n                })\r\n            }\r\n        } else {\r\n            throw new TypeError('data is not an Array')\r\n        }\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}\r\n","export default function ReverseRank(array) {\r\n    const _args = arguments;\r\n\r\n    try {\r\n        // Type check, throw TypeError if necessary\r\n        if (Array.isArray(array)) {\r\n\r\n            // Check if it's an array of objects by looking into an optional second argument\r\n            // Do a simple sort if it's not\r\n            if (_args[1]) {\r\n                for (var i = 0; i <= array.length + 5; i++) {\r\n                    if (typeof(array[i][_args[1]]) == 'number') {\r\n                        return new Promise((resolve, reject) => {\r\n                            resolve(array.sort(function(a, b) {\r\n                                return a[_args[1]] < b[_args[1]]\r\n                            }).reverse())\r\n                        })\r\n                    }\r\n                    if (typeof(array[i][_args[1]]) == 'string') {\r\n\r\n                        return new Promise((resolve, reject) => {\r\n                            resolve(array.sort(function(a, b) {\r\n                                if (a[_args[1]] < b[_args[1]]) {\r\n                                    return -1\r\n                                }\r\n                                if (a[_args[1]] > b[_args[1]]) {\r\n                                    return 1\r\n                                }\r\n                                return 0;\r\n                            }).reverse())\r\n                        })\r\n                    }\r\n                } \r\n            } else {\r\n                return new Promise((resolve, reject) => {\r\n                    resolve(array.sort().reverse())\r\n                })\r\n            }\r\n        } else {\r\n            throw new TypeError('Soul.ReverseRank: data is not an Array')\r\n        }\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}\r\n","export default function typeIsCorrect(data, type) {\r\n    let result = typeof(data) == type.toLowerCase() ? true : false;\r\n    return result;\r\n}","import typeIsCorrect from '../utils/typeIsCorrect';\r\n\r\nexport default function SetRanking(array, property, quantity) {\r\n    try {\r\n        // Rankings to be returned. Since we're working with \"top\" and \"bottom\" results in 2\r\n        // Max number: 3, returns top, bottom and middle results\r\n        const RANKING_ROWS = 2;\r\n        \r\n        const DEFAULT_ROWS = 2;\r\n        const MAX_RANKING_ROWS_QUANTITY = 3;\r\n        const CURRENT_RANKING_ROW = 1;\r\n\r\n        // output  array\r\n        let _output = [];\r\n\r\n        // Set ranking rows in output according to settings\r\n        for (var i = 0; i < RANKING_ROWS; i++) {\r\n            _output.push(new Array())\r\n        }\r\n        \r\n        // Check type of arguments, else throw TypeError\r\n        if (\r\n            Array.isArray(array)\r\n            && typeIsCorrect(property, 'string') \r\n            && Number.isInteger(quantity)\r\n        ) {\r\n\r\n            // Results to be returned in each ranking row. \r\n            // If quantity * RANKING_ROWS is minor than array length, \r\n            // quantity equals array length divided by ranking rows\r\n            let _results = quantity * RANKING_ROWS >= array.length ? quantity : array.length / RANKING_ROWS;\r\n\r\n            for (var i = 0; i < array.length; i++) {\r\n                array.sort(function(a, b) {\r\n                    return a[property] < b[property];\r\n                })\r\n            }\r\n\r\n            _output[0].push(array.slice(0, _results))\r\n            _output[1].push(array.slice(-_results))\r\n            \r\n            if (RANKING_ROWS == MAX_RANKING_ROWS_QUANTITY) {\r\n                _output[RANKING_ROWS].push(array.splice(-results, _results * (RANKING_ROWS - CURRENT_RANKING_ROW)))\r\n            }\r\n\r\n            if (RANKING_ROWS > MAX_RANKING_ROWS_QUANTITY) {\r\n                _output = _output.slice(0, DEFAULT_ROWS)\r\n            }\r\n\r\n            return new Promise((resolve, reject) => {\r\n                return resolve(_output);\r\n            }) \r\n    \r\n\r\n        } else {\r\n            throw new TypeError();\r\n        }\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}","import typeIsCorrect from '../utils/typeIsCorrect';\r\n\r\nexport default function Render(\r\n    config = {\r\n        data: [],\r\n        element: '',\r\n        value: false \r\n    }) {\r\n    try {\r\n        const _elementClass = element.indexOf('.') > -1 ? element : `. ${element}`;\r\n        const _args = arguments;\r\n        const _values = [];\r\n\r\n        if (typeIsCorrect(config.data, 'array') && config.value) {\r\n            config.data.forEach((key, index, array) => {\r\n                _values.push(key[config.value])\r\n            })\r\n\r\n            document.querySelector(_elementClass).innerHTML= _values.join(' - ');\r\n\r\n            return new Promise((resolve, reject) => {\r\n                return resolve(config);\r\n            })\r\n\r\n        }\r\n        else {\r\n            throw new TypeError()\r\n        }\r\n\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}","export default function CapitalizeAll(string) {\r\n    try {\r\n        let isString = typeof(string) == 'string' ? true : false;\r\n\r\n        if (isString) {\r\n            return string.replace(/(\\b\\w)/gi, function(l) {\r\n                return new Promise((resolve, reject) => {\r\n                    resolve(l.toUppercase());\r\n                })\r\n             })\r\n        } else {\r\n            throw new TypeError();\r\n        }\r\n\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}","import Rank from './lib/Rank'\r\nimport ReverseRank from './lib/ReverseRank'\r\nimport SetRanking from './lib/SetRanking'\r\nimport Render from './lib/Render';\r\nimport CapitalizeAll from './lib/CapitalizeAlll';\r\n\r\nexport var Soul = {\r\n  Rank: Rank,\r\n  ReverseRank: ReverseRank,\r\n  SetRanking: SetRanking,\r\n  Render: Render,\r\n  CapitalizeAll: CapitalizeAll\r\n} "],"names":["Rank","array","_args","arguments","Array","isArray","TypeError","i","length","Promise","resolve","sort","a","b","e","console","error","ReverseRank","reverse","typeIsCorrect","data","type","result","toLowerCase","SetRanking","property","quantity","RANKING_ROWS","_output","push","Number","isInteger","_results","slice","Render","config","element","value","_elementClass","indexOf","_values","forEach","key","document","querySelector","innerHTML","join","CapitalizeAll","string","replace","l","toUppercase","Soul"],"mappings":"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"}