{"version":3,"file":"soul.min.js","sources":["../src/lib/Rank.js","../src/lib/ReverseRank.js","../src/lib/SetRanking.js","../src/lib/Render.js","../src/index.js"],"sourcesContent":["\r\n\r\n\r\nexport default function Rank(array) {\r\n    const _args = arguments;\r\n\r\n    try {\r\n        // Type check, throw TypeError if necessary\r\n        if (Array.isArray(array)) {\r\n\r\n            // Check if it's an array of objects by looking into an optional second argument\r\n            // Do a simple sort if it's not\r\n            if (_args[1]) {\r\n                for (var i = 0; i <= array.length + 5; i++) {\r\n                    if (typeof(array[i][_args[1]]) == 'number') {\r\n                        return array.sort(function(a, b) {\r\n                            return a[_args[1]] < b[_args[1]]\r\n                        })\r\n                    }\r\n                    if (typeof(array[i][_args[1]]) == 'string') {\r\n                        return array.sort(function(a, b) {\r\n                            if (a[_args[1]] < b[_args[1]]) {\r\n                                return -1\r\n                            }\r\n                            if (a[_args[1]] > b[_args[1]]) {\r\n                                return 1\r\n                            }\r\n                            return 0;\r\n                        })\r\n                    }\r\n                } \r\n            } else {\r\n                return array.sort()    \r\n            }\r\n        } else {\r\n            throw new TypeError('Soul.Rank: ' + typeof(array) + ' is not an Array')\r\n        }\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}","\r\n\r\n\r\nexport default function ReverseRank(array) {\r\n    const _args = arguments;\r\n\r\n    try {\r\n        // Type check, throw TypeError if necessary\r\n        if (Array.isArray(array)) {\r\n\r\n            // Check if it's an array of objects by looking into an optional second argument\r\n            // Do a simple sort if it's not\r\n            if (_args[1]) {\r\n                for (var i = 0; i <= array.length + 5; i++) {\r\n                    if (typeof(array[i][_args[1]]) == 'number') {\r\n                        return array.sort(function(a, b) {\r\n                            return a[_args[1]] < b[_args[1]]\r\n                        }).reverse()\r\n                    }\r\n                    if (typeof(array[i][_args[1]]) == 'string') {\r\n                        return array.sort(function(a, b) {\r\n                            if (a[_args[1]] < b[_args[1]]) {\r\n                                return -1\r\n                            }\r\n                            if (a[_args[1]] > b[_args[1]]) {\r\n                                return 1\r\n                            }\r\n                            return 0;\r\n                        }).reverse()\r\n                    }\r\n                } \r\n            } else {\r\n                return array.sort().reverse();    \r\n            }\r\n        } else {\r\n            throw new TypeError('Soul.Rank: ' + typeof(array) + ' is not an Array')\r\n        }\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}","export default function SetRanking(array, property, quantity) {\r\n    try {\r\n        // Rankings to be returned. Since we're working with \"top\" and \"bottom\" results in 2\r\n        // Max number: 3, returns top, bottom and middle results\r\n        const RANKING_ROWS = 2;\r\n        \r\n        const DEFAULT_ROWS = 2;\r\n        const MAX_RANKING_ROWS_QUANTITY = 3;\r\n        const CURRENT_RANKING_ROW = 1;\r\n\r\n        // output  array\r\n        let _output = [];\r\n\r\n        // Set ranking rows in output according to settings\r\n        for (var i = 0; i < RANKING_ROWS; i++) {\r\n            _output.push(new Array())\r\n        }\r\n        \r\n        // Check type of arguments, else throw TypeError\r\n        if (\r\n            Array.isArray(array)\r\n            && typeof(property) == 'string' \r\n            && Number.isInteger(quantity)\r\n        ) {\r\n\r\n            // Results to be returned in each ranking row. \r\n            // If quantity * RANKING_ROWS is minor than array length, \r\n            // quantity equals array length divided by ranking rows\r\n            let _results = quantity * RANKING_ROWS >= array.length ? quantity : array.length / RANKING_ROWS;\r\n\r\n            for (var i = 0; i < array.length; i++) {\r\n                array.sort(function(a, b) {\r\n                    return a[property] < b[property];\r\n                })\r\n            }\r\n\r\n            _output[0].push(array.slice(0, _results))\r\n            _output[1].push(array.slice(-_results))\r\n            \r\n            if (RANKING_ROWS == MAX_RANKING_ROWS_QUANTITY) {\r\n                _output[RANKING_ROWS].push(array.splice(-results, _results * (RANKING_ROWS - CURRENT_RANKING_ROW)))\r\n            }\r\n\r\n            if (RANKING_ROWS > MAX_RANKING_ROWS_QUANTITY) {\r\n                _output = _output.slice(0, DEFAULT_ROWS)\r\n            }\r\n\r\n            return _output;\r\n\r\n        } else {\r\n            throw new TypeError();\r\n        }\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}","export default function Render(config) {\r\n    try {\r\n        const _elementClass = element.indexOf('.') > -1 ? element : `. ${element}`;\r\n        const _args = arguments;\r\n        const _values = [];\r\n\r\n        if (Array.isArray(config.data) && config.value) {\r\n            config.data.forEach((key, index, array) => {\r\n                _values.push(key[config.value])\r\n            })\r\n\r\n            document.querySelector(_elementClass).innerHTML= _values.join(' - ');\r\n\r\n            return true;\r\n\r\n        }\r\n        else {\r\n            throw new TypeError()\r\n        }\r\n\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}","import Rank from './lib/Rank'\r\nimport ReverseRank from './lib/ReverseRank'\r\nimport SetRanking from './lib/SetRanking'\r\nimport Render from './lib/Render';\r\n\r\nexport var Soul = {\r\n  Rank: Rank,\r\n  ReverseRank: ReverseRank,\r\n  SetRanking: SetRanking,\r\n  Render: Render\r\n} "],"names":["Rank","array","_args","arguments","Array","isArray","TypeError","i","length","sort","a","b","e","console","error","ReverseRank","reverse","SetRanking","property","quantity","RANKING_ROWS","_output","push","Number","isInteger","_results","slice","Render","config","_elementClass","element","indexOf","_values","data","value","forEach","key","document","querySelector","innerHTML","join","Soul"],"mappings":"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"}