{"version":3,"file":"soul.min.js","sources":["../src/utils/typeIsCorrect.js","../src/lib/Rank.js","../src/lib/ReverseRank.js","../src/lib/SetRanking.js","../src/lib/Render.js","../src/lib/CapitalizeAlll.js","../src/index.js"],"sourcesContent":["export default function typeIsCorrect(data, type) {\r\n    let result = typeof(data) == type.toLowerCase() ? true : false;\r\n    return result;\r\n}","import typeIsCorrect from '../utils/typeIsCorrect';\r\n\r\nexport default function Rank(array) {\r\n    const _args = arguments;\r\n    var _promise = new Promise();\r\n\r\n    try {\r\n        // Type check, throw TypeError if necessary\r\n        if (typeIsCorrect(array, 'array')) {\r\n\r\n            // Check if it's an array of objects by looking into an optional second argument\r\n            // Do a simple sort if it's not\r\n            if (_args[1]) {\r\n                for (var i = 0; i <= array.length + 5; i++) {\r\n                    if (typeof(array[i][_args[1]]) == 'number') {\r\n                        return _promise.resolve(array.sort(function(a, b) {\r\n                            return a[_args[1]] < b[_args[1]]\r\n                        }))\r\n                    }\r\n                    if (typeof(array[i][_args[1]]) == 'string') {\r\n                        return _promise.resolve(array.sort(function(a, b) {\r\n                            if (a[_args[1]] < b[_args[1]]) {\r\n                                return -1\r\n                            }\r\n                            if (a[_args[1]] > b[_args[1]]) {\r\n                                return 1\r\n                            }\r\n                            return 0;\r\n                        }))\r\n                    }\r\n                } \r\n            } else {\r\n                return _promise.resolve(array.sort())    \r\n            }\r\n        } else {\r\n            throw new TypeError('Soul.Rank: ' + typeof(array) + ' is not an Array')\r\n        }\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}\r\n","import typeIsCorrect from '../utils/typeIsCorrect';\r\n\r\nexport default function ReverseRank(array) {\r\n    const _args = arguments;\r\n\r\n    try {\r\n        // Type check, throw TypeError if necessary\r\n        if (typeIsCorrect(array, 'array')) {\r\n\r\n            // Check if it's an array of objects by looking into an optional second argument\r\n            // Do a simple sort if it's not\r\n            if (_args[1]) {\r\n                for (var i = 0; i <= array.length + 5; i++) {\r\n                    if (typeof(array[i][_args[1]]) == 'number') {\r\n                        return array.sort(function(a, b) {\r\n                            return a[_args[1]] < b[_args[1]]\r\n                        }).reverse()\r\n                    }\r\n                    if (typeof(array[i][_args[1]]) == 'string') {\r\n                        return array.sort(function(a, b) {\r\n                            if (a[_args[1]] < b[_args[1]]) {\r\n                                return -1\r\n                            }\r\n                            if (a[_args[1]] > b[_args[1]]) {\r\n                                return 1\r\n                            }\r\n                            return 0;\r\n                        }).reverse()\r\n                    }\r\n                } \r\n            } else {\r\n                return array.sort().reverse();    \r\n            }\r\n        } else {\r\n            throw new TypeError('Soul.Rank: ' + typeof(array) + ' is not an Array')\r\n        }\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}\r\n","import typeIsCorrect from '../utils/typeIsCorrect';\r\n\r\nexport default function SetRanking(array, property, quantity) {\r\n    try {\r\n        // Rankings to be returned. Since we're working with \"top\" and \"bottom\" results in 2\r\n        // Max number: 3, returns top, bottom and middle results\r\n        const RANKING_ROWS = 2;\r\n        \r\n        const DEFAULT_ROWS = 2;\r\n        const MAX_RANKING_ROWS_QUANTITY = 3;\r\n        const CURRENT_RANKING_ROW = 1;\r\n\r\n        // output  array\r\n        let _output = [];\r\n\r\n        // Set ranking rows in output according to settings\r\n        for (var i = 0; i < RANKING_ROWS; i++) {\r\n            _output.push(new Array())\r\n        }\r\n        \r\n        // Check type of arguments, else throw TypeError\r\n        if (\r\n            typeIsCorrect(array, 'array')\r\n            && typeIsCorrect(property, 'string') \r\n            && Number.isInteger(quantity)\r\n        ) {\r\n\r\n            // Results to be returned in each ranking row. \r\n            // If quantity * RANKING_ROWS is minor than array length, \r\n            // quantity equals array length divided by ranking rows\r\n            let _results = quantity * RANKING_ROWS >= array.length ? quantity : array.length / RANKING_ROWS;\r\n\r\n            for (var i = 0; i < array.length; i++) {\r\n                array.sort(function(a, b) {\r\n                    return a[property] < b[property];\r\n                })\r\n            }\r\n\r\n            _output[0].push(array.slice(0, _results))\r\n            _output[1].push(array.slice(-_results))\r\n            \r\n            if (RANKING_ROWS == MAX_RANKING_ROWS_QUANTITY) {\r\n                _output[RANKING_ROWS].push(array.splice(-results, _results * (RANKING_ROWS - CURRENT_RANKING_ROW)))\r\n            }\r\n\r\n            if (RANKING_ROWS > MAX_RANKING_ROWS_QUANTITY) {\r\n                _output = _output.slice(0, DEFAULT_ROWS)\r\n            }\r\n\r\n            return _output;\r\n\r\n        } else {\r\n            throw new TypeError();\r\n        }\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}","import typeIsCorrect from '../utils/typeIsCorrect';\r\nimport { resolve } from 'dns';\r\n\r\nexport default function Render(\r\n    config = {\r\n        data: [],\r\n        element: '',\r\n        value: false \r\n    }) {\r\n    try {\r\n        const _elementClass = element.indexOf('.') > -1 ? element : `. ${element}`;\r\n        const _args = arguments;\r\n        const _values = [];\r\n\r\n        if (typeIsCorrect(config.data, 'array') && config.value) {\r\n            config.data.forEach((key, index, array) => {\r\n                _values.push(key[config.value])\r\n            })\r\n\r\n            document.querySelector(_elementClass).innerHTML= _values.join(' - ');\r\n\r\n            return new Promise((resolve, reject) => {\r\n                return resolve(config);\r\n            })\r\n\r\n        }\r\n        else {\r\n            throw new TypeError()\r\n        }\r\n\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}","export default function CapitalizeAll(string) {\r\n    try {\r\n        let isString = typeof(string) == 'string' ? true : false;\r\n\r\n        if (isString) {\r\n            return string.replace(/(\\b\\w)/gi, function(l) {\r\n                return new Promise((resolve, reject) => {\r\n                    resolve(l.toUppercase());\r\n                })\r\n             })\r\n        } else {\r\n            throw new TypeError();\r\n        }\r\n\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}","import Rank from './lib/Rank'\r\nimport ReverseRank from './lib/ReverseRank'\r\nimport SetRanking from './lib/SetRanking'\r\nimport Render from './lib/Render';\r\nimport CapitalizeAll from './lib/CapitalizeAlll';\r\n\r\nexport var Soul = {\r\n  Rank: Rank,\r\n  ReverseRank: ReverseRank,\r\n  SetRanking: SetRanking,\r\n  Render: Render,\r\n  CapitalizeAll: CapitalizeAll\r\n} "],"names":["typeIsCorrect","data","type","result","toLowerCase","Rank","array","_args","arguments","_promise","Promise","TypeError","i","length","resolve","sort","a","b","e","console","error","ReverseRank","reverse","SetRanking","property","quantity","RANKING_ROWS","_output","push","Number","isInteger","_results","slice","Render","config","element","value","_elementClass","indexOf","_values","forEach","key","document","querySelector","innerHTML","join","CapitalizeAll","string","replace","l","toUppercase","Soul"],"mappings":"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"}